# ATMDB - Atmospheric Database Package

ATMDB is an optional package for the ATMOS FORTRAN project that provides enhanced database functionality and data management capabilities.

## Features

- Saves unique models runs to database, and returns nearest-neighbor models to current boundary conditions
- Large file handling with git-lfs

## Prerequisites

- Git with git-lfs support
- Python 3.8+ (for auxiliary tools)

## Installation

### For ATMOS Users
If you're using ATMDB as part of the ATMOS project, it should be automatically included as a submodule. See the ATMOS documentation for details.


### For Users

1. **Install git-lfs** (if not already installed):
   ```bash
   # On Ubuntu/Debian
   sudo apt install git-lfs
   
   # On macOS with Homebrew
   brew install git-lfs
   (or direct from link below if you have an old version of MacOS)
   
   # On Windows, download from: https://git-lfs.github.io/
   ```

2. **Set up git-lfs**:
   ```bash
   git lfs install
   ```

3. **Clone this repository**:
   ```bash
   git clone https://github.com/markclaire1/ATMDB.git
   cd ATMDB
   
   # Ensure all LFS files are downloaded
   git lfs pull
   ```

4. **Set up conda environment**:
   ```bash
   conda env create -f environment.yml
   conda activate atmdb-dev
   ```

## File Organization

```
ATMDB/
├── atmdb.py   #python code for database project
├── ***Index.hdf5  # Binary files that contains a vector representation of every atmosphere in the database
├── ***AtmDB.hdf5  # Binary files that contain the atmospheric profiles and boundary conditions
├── VDS.h5 (gitignored) #an hdf5 virtual dataset that points to all *Index.hdf5 files
├── environment.yml     # Conda environment
└── .gitattributes     # git-lfs configuration
```

## Working with Large Files

This repository uses git-lfs for large binary files. The following file types are automatically tracked:

- `*.hdf5`, `*.h5` - HDF5 files


### Adding New Large Files

ATMDB will automatically make new .hdf5 files based on your username. These will be automatically tracked by git-lfs.
While not really neccesary for this project, here is how you would add new binary files

```bash
# Track new file types
git lfs track "*.your_extension"
git add .gitattributes
git commit -m "Track new file type with LFS"
```

### Checking LFS Status
```bash
# See which files are tracked by LFS
git lfs ls-files

# Check LFS status
git lfs status
```

## Contributing
Standard git life cycle:
  1. Fork the repository
  2. Create a feature branch (`git checkout -b feature/new-feature`)
  3. Make your changes
  4. Run tests (`make test`)
  5. Commit your changes (`git commit -am 'Add new feature'`)
  6. Push to the branch (`git push origin feature/new-feature`)
  7. Create a Pull Request

(but see also ATMOS documentation for insuring submodule updates)

### For Large Files
When contributing files that should be tracked by git-lfs:
1. Ensure the file type is in `.gitattributes`
2. Add the file normally with `git add`
3. Verify it's tracked with `git lfs ls-files`
4. Commit and push as usual
